<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>知识图谱构建流程详解</title>
    <link href="/2023/11/17/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/11/17/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>参考博客</strong></p><p>知乎：<a href="https://zhuanlan.zhihu.com/p/145447330">https://zhuanlan.zhihu.com/p/145447330</a></p><p>博客园：<a href="https://www.cnblogs.com/huangyc/p/10043749.html">https://www.cnblogs.com/huangyc/p/10043749.html</a></p><p>综述：<a href="http://kns-cnki-net-s.vpn.uestc.edu.cn:8118/KXReader/Detail?invoice=TfXLC2ZSNT9XLq1SP5F5Q9DYo1dpuUSVTM87GLoVDLiokXx5M8xMFoGMu7aMK/3Ct/fki/LdQgDhVvrV505vCEn2VAA3pa6x0jPIWd5WW/alFPDMCs3HfKHXXce3tMJ5b1t90Tg+SvdD9M68sD10nMMgtW8puh+wjUu1P858iwA=&DBCODE=CJFQ&FileName=JFYZ201603009&TABLEName=cjfdlast2016&nonce=49E73AC3869B4489BBF4BDE9628A1CDA&TIMESTAMP=1700221256698&uid=">知识图谱构建技术综述</a></p><p>清华 XLore：<a href="https://xlore.cn/index">https://xlore.cn/index</a></p></br><h2 id="一、知识图谱简介"><a href="#一、知识图谱简介" class="headerlink" title="一、知识图谱简介"></a>一、知识图谱简介</h2><h3 id="1-1-历史沿革"><a href="#1-1-历史沿革" class="headerlink" title="1.1  历史沿革"></a>1.1  历史沿革</h3><p>提出知识图谱的目的：</p><ul><li>实现智能化语义检索</li><li>解决信息检索问题</li></ul><p>虽然知识图谱的概念较新，但它并非是一个全新的研究领域。早在 2006 年，Berners-Lee 就提出了数据链接（linkeddata）的思想，呼吁推广和完善相关的技术标准如：</p><ul><li>URI（uniform resource identifier）</li><li>RDF（resource description framework）</li><li>OWL（ontology language）</li></ul><p>为迎接<strong>语义网络</strong>时代的到来做好准备。随后掀起了一场语义网络研究热潮，知识图谱技术正是建立在相关的研究成果之上的，是对现有语义网络技术的一次扬弃和升华。</p></br><h3 id="1-2-定义"><a href="#1-2-定义" class="headerlink" title="1.2  定义"></a>1.2  定义</h3><p>定义：知识图谱是<strong>结构化的语义知识库</strong>，用于以符号形式描述物理世界中的概念及其相互关系。其基本组成单位是<strong>“实体-关系-实体”三元组，以及实体及其相关属性-值对</strong>。实体间通过关系相互联结，构成网状的知识结构。</p><p>通过知识图谱，可以实现 web 从网页链接（web1.0）向概念链接转变，<strong>支持用户按主题而不是字符串检索</strong>，从而真正实现语义检索。基于知识图谱的搜索引擎，能够<strong>以图形方式向用户反馈结构化的知识</strong>，用户不浏览大量网页，就可以准确定位和深度获取知识。</p><p><img src="https://hexo-0711.oss-cn-chengdu.aliyuncs.com/image/graphpng.png" alt="诸葛亮-清华博拉图"></p><p>上述定义包含 3 层含义：</p><ul><li>知识图谱是由许多具有属性的实体通过关系链接而成的网状知识库。从图的角度来看，知识图谱在本质上是一种<strong>概念网络</strong>，其中的<strong>节点表示物理世界的实体（或概念）</strong>，而实体间的各种语义关系则构成网络中的边。由此，知识图谱是对物理世界的一种符号表达。</li><li>知识图谱的研究价值在于，它是构建在当前 web 基础之上的一层<strong>覆盖网络（overlay network）</strong>，借助知识图谱，能够在 web 网页之上建立概念间的链接关系，从而以最小的代价将互联网中积累的信息组织起来，成为可以被利用的知识<strong>（信息–&gt;知识）</strong></li><li>知识图谱的应用价值在于，它能够改变现有的信息检索方式，一方面<strong>通过推理实现概念检索</strong>（相对于现有的字符串模糊匹配方式而言）；另一方面以<strong>图形化方式</strong>向用户展示经过分类整理的结构化知识，从而使人们从人工过滤网页寻找答案的模式中解脱出来。</li></ul><p>知识图谱的分类：</p><ul><li>用于构建结构化的百科知识的“通用知识图谱”</li><li>基于行业数据构建和应用的“领域知识图谱”</li></ul></br><h3 id="1-3-架构"><a href="#1-3-架构" class="headerlink" title="1.3  架构"></a>1.3  架构</h3><p>知识图谱的架构包含：</p><ul><li>知识图谱自身的逻辑结构，分为数据层、模式层</li><li>构建知识图谱所采用的技术架构</li></ul><p><strong>知识图谱自身的逻辑结构</strong></p><p>在知识图谱的数据层，<strong>知识以事实（fact）为单位存储在图数据库</strong>。例如谷歌的 Graphd 和微软的 Trinity 都是典型的图数据库。如果<strong>以“实体-关系-实体”或者“实体-属性-属性值”三元组作为事实的基本表达方式</strong>，则存储在图数据库中的所有数据将构成庞大的实体关系网络，形成知识的“图谱”。</p><p>模式层位居数据层之上，是知识图谱的核心。在模式层存储的是经过提炼的知识，通常采用<strong>本体库</strong>来管理知识图谱的模式层，借助<strong>本体库对公理、规则和约束条件的支持能力</strong>来规范实体、关系以及实体的类型和属性等对象之间的联系。本体库在知识图谱中的地位相当于知识库的模具，拥有本体库的知识库冗余知识较少。</p><p><img src="https://hexo-0711.oss-cn-chengdu.aliyuncs.com/image/human.png" alt="本体定义-人类"></p><p><strong>构建知识图谱所采用的技术架构</strong></p><p>下图给出了知识图谱技术的整体架构，其中虚线框内的部分为知识图谱的构建过程，同时也是知识图谱更新的过程。</p><p><img src="https://hexo-0711.oss-cn-chengdu.aliyuncs.com/image/process.jpg" alt="知识图谱构建过程"></p><p>如图所示，<strong>知识图谱的构建过程</strong>是从原始数据出发，采用一系列自动或半自动的技术手段，从原始数据中提取出知识要素（即事实），并将其存入知识库的数据层和模式层的过程。</p><p>这是一个迭代更新的过程，根据知识获取的逻辑，每一轮迭代包含 3 个阶段：</p><ol><li><strong>信息抽取：</strong>从各种类型的数据源中提取出实体、属性以及实体间的相互关系，在此基础上将知识以本体的形式进行表达（本体对实体、属性和关系制定了规则和约束）；</li><li><strong>知识融合：</strong>在获得新知识之后，还需要对其进行整合，以消除矛盾和歧义。比如某些实体可能有多种表达，某个特定称谓也许对应于多个不同的实体等；</li><li><strong>知识加工：</strong>对于经过融合的新知识，还需要接受质量评估（部分需要人工参与甄别），合格的部分才能被加入到知识库中，以确保知识库的质量。新增数据之后，可以进行<strong>知识推理</strong>，以拓展现有知识，得到新的知识。</li></ol><p>知识图谱有 2 种构建方式：</p><ul><li><strong>自顶向下构建：</strong>是指借助百科类网站等结构化数据源，从高质量数据中提取本体和模式信息，加入到知识库中。</li><li><strong>自底向上构建：</strong>是指借助一定的技术手段，从公开采集的数据中<strong>提取出资源模式</strong>，选择其中置信度较高的新模式，经人工审核之后，加入到知识库中。如：谷歌的 Knowledge Vault、微软的 Satori 等。</li></ul><blockquote><p>GPT：提取出资源模式就是指提取出数据中包含的实体、属性、关系。</p></blockquote></br><p><strong>Data Acquisition 中的数据类型</strong></p><p>知识图谱的<strong>原始数据</strong>类型一般来说有三类，也是互联网上的三类原始数据：</p><ul><li>结构化数据（Structed Data）：如关系数据库</li><li>半结构化数据（Semi-Structed Data）：如 XML、JSON、百科</li><li>非结构化数据（UnStructed Data）：如图片、音频、视频、文本</li></ul><p>原始数据存储方式：</p><ul><li>使用 RDF（资源描述框架）等规范存储格式来进行存储</li><li>使用 Neo4j 等常用的图数据库来进行存储</li></ul><blockquote><p>在知识图谱方面，图数据库比关系数据库灵活的多。在数据少的时候，关系数据库也没有问题，效率也不低。但是随着知识图谱变的复杂，图数据库的优势会明显增加。当涉及到 2、3 度的关联查询，基于图数据库的效率会比关系数据库的效率高出几千倍甚至几百万倍。</p></blockquote></br><hr><p>接下来介绍的是“知识图谱的构建技术”。</p><hr></br><h2 id="二、信息抽取"><a href="#二、信息抽取" class="headerlink" title="二、信息抽取"></a>二、信息抽取</h2><p>信息抽取（infromation extraction）是知识图谱构建的第1步，其中的关键问题是：如何从异构数据源中自动抽取信息得到候选知识单元？（候选知识单元：被认为可能包含有用知识的单元或片段。）</p><p>信息抽取是一种自动化地从半结构化、非结构化数据中抽取<strong>实体、关系以及实体属性等结构化信息</strong>的技术。</p><p>关键技术包括：实体抽取、关系抽取、属性抽取。</p></br><h3 id="2-1-实体抽取（Entity-Extraction）"><a href="#2-1-实体抽取（Entity-Extraction）" class="headerlink" title="2.1  实体抽取（Entity Extraction）"></a>2.1  实体抽取（Entity Extraction）</h3><p>实体抽取又称为命名实体识别（named entity recognition，NER），是指<strong>从文本数据集中自动识别出命名实体</strong>。</p><p>实体抽取的质量（准确率和召回率）对后续的知识获取效率和质量影响极大，因此是信息抽取中最为基础和关键的部分。</p><blockquote><p>召回率</p><p>$Recall&#x3D;\frac{True Positives+False Negatives}{True Positives} $</p><p>用于衡量模型能够正确识别正例样本的能力。</p></blockquote></br><h3 id="2-2-关系抽取（Relation-Extraction）"><a href="#2-2-关系抽取（Relation-Extraction）" class="headerlink" title="2.2  关系抽取（Relation Extraction）"></a>2.2  关系抽取（Relation Extraction）</h3><p>文本语料经过实体抽取，得到的是一系列离散的命名实体，为了得到语义信息，还需要<strong>从相关的语料中提取出实体之间的关联关系</strong>，通过关联关系将实体（概念）联系起来，才能够形成网状的知识结构。研究关系抽取技术的目的，就是解决如何从文本语料中抽取实体间的关系这一基本问题。</p><ol><li>人工构造语法和语义规则（模式匹配）</li><li>统计机器学习方法</li><li>基于特征向量或核函数的有监督学习方法</li><li>研究重点转向半监督和无监督</li><li>开始研究面向开放域的信息抽取方法</li><li>将面向开放域的信息抽取方法和面向封闭领域的传统方法结合</li></ol></br><h3 id="2-3-属性抽取（Attribute-Extraction）"><a href="#2-3-属性抽取（Attribute-Extraction）" class="headerlink" title="2.3  属性抽取（Attribute Extraction）"></a>2.3  属性抽取（Attribute Extraction）</h3><p>属性抽取的目标是从不同信息源中采集特定实体的属性信息。例如针对某个公众人物，可以从网络公开信息中得到其昵称、生日、国籍、教育背景等信息。属性抽取技术能够从多种数据来源中汇集这些信息，实现对实体属性的完整勾画。</p><ol><li>将实体的属性视作实体与属性值之间的一种名词性关系，<strong>将属性抽取任务转化为关系抽取任务</strong>。</li><li>基于规则和启发式算法，抽取结构化数据。</li><li>基于百科类网站的半结构化数据，通过自动抽取生成训练语料，用于训练实体属性标注模型，然后将其应用于对非结构化数据的实体属性抽取。</li><li>采用数据挖掘的方法直接从文本中挖掘实体属性和属性值之间的关系模式，据此实现对属性名和属性值在文本中的定位。</li></ol></br></br><h2 id="三、知识融合"><a href="#三、知识融合" class="headerlink" title="三、知识融合"></a>三、知识融合</h2><p>通过信息抽取，我们就从原始的半结构化、非结构化数据中获得了实体、关系以及实体的属性信息。</p><p>仍需解决的问题：</p><ul><li>信息之间的关系是扁平化的，缺乏层次性和逻辑性</li><li>知识中还存在大量冗杂和错误的信息</li></ul><p>知识融合包括两部分内容：实体链接、知识合并。</p></br><h3 id="3-1-实体链接（Entity-Linking）"><a href="#3-1-实体链接（Entity-Linking）" class="headerlink" title="3.1  实体链接（Entity Linking）"></a>3.1  实体链接（Entity Linking）</h3><p>实体链接是指将文本中抽取得到的实体对象链接到知识库中对应的实体对象。</p><p>基本思想：</p><ol><li>根据给定的<strong>实体指称项</strong>，从知识库中选出一组候选实体对象；</li><li>通过相似度计算将实体指称项链接到正确的实体对象。</li></ol><p>研究历史：</p><ol><li>仅关注如何将从文本中抽取到的实体链接到知识库中，忽视了位于同一文档的实体间存在的语义联系。</li><li>开始关注利用实体的共现关系，同时将多个实体链接到知识库中。即集成实体链接（collective entity linking）</li></ol><p>实体链接的流程：</p><ul><li>从文本中通过实体抽取得到实体指称项。</li><li>进行<strong>实体消歧</strong>和<strong>共指消解</strong>：<ul><li>判断知识库中同名的实体是否与之表示不同的含义</li><li>判断知识库中不同名的实体是否与之表示相同的含义</li></ul></li><li>在确认知识库中对应的正确实体对象之后，将该实体指称项链接到知识库中对应实体。</li></ul></br><h4 id="3-1-1-实体消歧"><a href="#3-1-1-实体消歧" class="headerlink" title="3.1.1  实体消歧"></a>3.1.1  实体消歧</h4><p>实体消歧主要用于解决同名的实体之间存在歧义的问题。</p><p>通过实体消歧，就可以根据当前的语境，准确建立实体链接，实体消歧主要采用聚类法。其实也可以看做基于上下文的分类问题，类似于<strong>词性消歧</strong>和<strong>词义消歧</strong>。</p></br><h4 id="3-1-2-共指消解"><a href="#3-1-2-共指消解" class="headerlink" title="3.1.2  共指消解"></a>3.1.2  共指消解</h4><p>共指消解主要用于解决多个实体指称项对应同一实体对象的问题。</p><p>在一次会话中，多个指称可能指向的是同一实体对象。利用共指消解技术，可以将这些指称项<strong>关联（合并）</strong>到正确的实体对象，由于该问题在信息检索和自然语言处理等领域具有特殊的重要性，吸引了大量的研究努力。共指消解还有一些其他的名字，比如<strong>对象对齐、实体匹配和实体同义</strong>。</p></br><h3 id="3-2-知识合并"><a href="#3-2-知识合并" class="headerlink" title="3.2  知识合并"></a>3.2  知识合并</h3><p>在构建知识图谱时，可以从第三方知识库产品或已有的结构化数据获取知识输入。</p><p>常见的知识合并需求有两个：</p><ul><li>合并外部知识库</li><li>合并关系数据库</li></ul><p>合并外部知识库：</p><ul><li>数据层的融合，包括实体的指称、属性、关系以及所属类别等，主要的问题是如何避免实例以及关系的冲突问题，造成不必要的冗余</li><li>模式层的融合，将新得到的本体融入已有的本体库中</li></ul><p>合并关系数据库：在知识图谱构建过程中，一个重要的高质量知识来源是企业或者机构自己的关系数据库。为了将这些结构化的历史数据融入到知识图谱中，可以采用资源描述框架（RDF）作为数据模型。业界和学术界将这一数据转换过程形象地称为 RDB2RDF，其实质就是将关系数据库的数据换成 RDF 的三元组数据。</p></br></br><h2 id="四、知识加工"><a href="#四、知识加工" class="headerlink" title="四、知识加工"></a>四、知识加工</h2><p>在前面，我们已经通过信息抽取，从原始语料中提取出了实体、关系与属性等知识要素，并且经过知识融合，消除实体指称项与实体对象之间的歧义，得到一系列基本的事实表达。</p><p>然而事实本身并不等于知识。要想最终获得结构化，网络化的知识体系，还需要经历知识加工的过程。</p><p>知识加工主要包括 3 方面内容：本体构建、知识推理、质量评估。</p></br><h3 id="4-1-本体构建"><a href="#4-1-本体构建" class="headerlink" title="4.1  本体构建"></a>4.1  本体构建</h3><p>本体（ontology）是指人工的概念集合、概念框架，如“人”、“事”、“物”等。</p><p>本体可以采用人工编辑的方式手动构建（借助<strong>本体编辑软件</strong>），也可以以数据驱动的自动化方式构建本体。因为人工方式工作量巨大，且很难找到符合要求的专家，因此当前主流的全局本体库产品，都是从一些面向特定领域的现有本体库出发，采用自动构建技术逐步扩展得到的。</p><p>自动化本体构建过程包含三个阶段：</p><ol><li>实体并列关系相似度计算</li><li>实体上下位关系抽取</li><li>本体的生成</li></ol><p>比如对下面这个例子，当知识图谱刚得到“阿里巴巴”、“腾讯”、“手机”这三个实体的时候，可能会认为它们三个之间并没有什么差别，但当它去<strong>计算三个实体之间的相似度</strong>后，就会发现，阿里巴巴和腾讯之间可能更相似，和手机差别更大一些。</p><p>这就是第一步的作用，但这样下来，知识图谱实际上还是没有一个上下层的概念，它还是不知道，阿里巴巴和手机，根本就不隶属于一个类型，无法比较。因此我们在<strong>实体上下位关系抽取</strong>这一步，就需要去完成这样的工作，从而生成第三步的本体。</p><p>当三步结束后，这个知识图谱可能就会明白，“阿里巴巴和腾讯，其实都是公司这样一个实体下的细分实体。它们和手机并不是一类。”</p></br><h3 id="4-2-知识推理"><a href="#4-2-知识推理" class="headerlink" title="4.2  知识推理"></a>4.2  知识推理</h3><p>在我们完成了本体构建这一步之后，一个知识图谱的雏形便已经搭建好了。但可能在这个时候，知识图谱之间大多数关系都是残缺的，缺失值非常严重，那么这个时候，我们就可以使用知识推理技术，去完成进一步的知识发现。</p><p>我们可以发现：如果 A 是 B 的配偶，B 是 C 的主席，C 坐落于 D，那么我们就可以认为，A 生活在 D 这个城市。</p><p>根据这一条规则，我们可以去挖掘一下在图里，是不是还有其它的 path 满足这个条件，那么我们就可以将 AD 两个关联起来。除此之外，我们还可以去思考，串联里有一环是 B 是 C 的主席，那么 B 是 C 的 CEO、B 是 C 的COO，是不是也可以作为这个推理策略的一环呢？</p><p>当然知识推理的对象也并不局限于实体间的关系，也可以是实体的属性值，本体的概念层次关系等。</p><p>推理属性值：已知某实体的生日属性，可以通过推理得到该实体的年龄属性；</p><p>推理概念：已知（老虎，科，猫科）和（猫科，目，食肉目）可以推出（老虎，目，食肉目）</p><p>这一块的算法主要可以分为 3 大类，<strong>基于逻辑的推理、基于图的推理和基于深度学习的推理</strong>。</p></br><h3 id="4-3-质量评估"><a href="#4-3-质量评估" class="headerlink" title="4.3  质量评估"></a>4.3  质量评估</h3><p>质量评估也是知识库构建技术的重要组成部分，这一部分存在的意义在于：可以对知识的可信度进行量化，通过舍弃置信度较低的知识来保障知识库的质量。</p></br></br><h2 id="五、知识更新"><a href="#五、知识更新" class="headerlink" title="五、知识更新"></a>五、知识更新</h2><p>从逻辑上看，知识库的更新包括概念层的更新和数据层的更新。</p><p>概念层的更新是指新增数据后获得了新的概念，需要自动将新的概念添加到知识库的概念层中。</p><p>数据层的更新主要是新增或更新实体、关系、属性值，对数据层进行更新需要考虑数据源的可靠性、数据的一致性（是否存在矛盾或冗杂等问题）等可靠数据源，并选择在各数据源中出现频率高的事实和属性加入知识库。</p><p>知识图谱的内容更新有两种方式：</p><ul><li>全面更新：指以更新后的全部数据为输入，从零开始构建知识图谱。这种方法比较简单，但资源消耗大，而且需要耗费大量人力资源进行系统维护；</li><li>增量更新：以当前新增数据为输入，向现有知识图谱中添加新增知识。这种方式资源消耗小，但目前仍需要大量人工干预（定义规则等），因此实施起来十分困难。</li></ul></br></br><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>通过知识图谱技术，不仅可以将互联网的信息表达成更接近人类认知世界的形式，而且提供了一种更好的组织、管理和利用海量信息的方式。目前的知识图谱技术主要用于<strong>智能语义搜索、移动个人助理（Siri）以及深度问答系统（Watson）</strong>，支撑这些应用的核心技术正是知识图谱技术。</p><p>在智能语义搜索中，当用户发起查询时，搜索引擎会借助知识图谱的帮助对用户查询的关键词进行解析和推理，进而将其映射到知识图谱中的一个或一组概念之上，然后根据知识图谱的概念层次结构，向用户返回图形化的知识结构，这就是我们在谷歌和百度的搜索结果中看到的<strong>知识卡片</strong>。</p><p>在深度问答应用中，系统同样会首先在知识图谱的帮助下对用户使用自然语言提出的问题进行语义分析和语法分析，进而将其转化成<strong>结构化形式的查询语句</strong>，然后在知识图谱中查询答案。比如，如果用户提问：『如何判断是否感染了埃博拉病毒？』，则该查询有可能被等价变换为『埃博拉病毒的症状有哪些？』，然后再进行推理变换，<strong>最终形成等价的三元组查询语句</strong>，如（埃博拉，症状，？）和（埃博拉，征兆，？）等。如果由于知识库不完善而无法通过推理来解答用户的问题，深度问答系统还可以利用搜索引擎向用户反馈搜索结果，同时根据搜索结果更新知识库，从而为回答后续的提问提前做出准备。</p>]]></content>
    
    
    
    <tags>
      
      <tag>知识图谱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>专利方向</title>
    <link href="/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BC%9A%E8%AE%AE/"/>
    <url>/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BC%9A%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>基于 AI 资产管理共识等领域专业文献与合作公司提供的资产数据集，设计并实现搜索到甲方（乙方）及其收款账本知识图谱，设计方案以增强知识在图谱中的表现，在图谱中体现资产管理知识，例如台帐本收账规则、动态计算账本特征与静态基本特征相关性等信息。此外，通过在下游任务上的表现与传统知识图谱性能进行对比分析与图谱质量测试。实现图谱可视化、相关实体节点查询，并且可以基于该知识图谱实现相关领域知识的推理和诊断，并能够为资产管理提供一定的可解释性。</p><p>基于：</p><ul><li>AI 资产管理共识等领域专业文献</li><li>合作公司提供的资产数据集</li></ul><p>设计并实现：知识图谱</p><ul><li>设计方案实现图谱可视化</li><li>设计方案实现相关实体节点查询<ul><li>能够搜索到甲方（乙方）</li><li>能够搜索到二者之间的收款账本</li></ul></li><li>设计方案增强知识在图谱中的表现</li></ul><p>更多要求：在图谱中体现资产管理知识</p><ul><li>设置规则：台帐本收账规则</li><li>动态计算：账本特征与静态基本特征相关性等信息</li></ul><hr><p>PDF文件，三种类型–&gt;选择“大模型”–&gt;9种关键字–&gt;做一个后端来做台账</p><p>合同种类：（痛点）收租标准</p><ul><li>租金的起伏</li><li>按月、按季度、按半年、按年</li></ul><p>大模型：</p><ul><li>讯飞的不开源，所以用清华大模型</li><li>缺显存高的服务器；①清水河②显存20G</li></ul><p>9种关键字：甲方、乙方、租金、…、收租标准、…、<strong>商务条件</strong></p><ul><li>前8个关键字已经可以了，主要痛点是第9个关键字</li><li>商务条件分成两个子项：①9-1按什么单位收、②<strong>9-2给的什么租金单位（识别不好，痛点）</strong><ul><li>大模型识别错单位</li><li>每个月租金不一样</li></ul></li></ul><p>13个虚拟合同：一半有表格，一半无表格</p><p>方琦：表格不好提取</p><ul><li><strong>表格：</strong>纯表格的提取能达到很好的效果，嵌入到PDF里的不好提取<ul><li>表格分类：<ul><li>有些表格是最终的账本：直接输出<ul><li>任务：把表格切出来</li></ul></li><li><strong>有些表格不是最终的账本(为了好看的)</strong></li></ul></li></ul></li><li><strong>文字：</strong><ul><li>①9-2关键字不能涵盖每年租金不同的情况；solution：拒收这种合同</li><li>②把“1万&#x2F;月”这个月租金乱认成年租金</li></ul></li></ul><p>大模型A利用PDF和B的输出，判断大模型B有没有乱说</p><p><strong>记录：合同希望是文字的形式，不要是表格的形式</strong></p><ul><li>不是图片版：把PDF转Word，直接提取表格</li><li>先不考虑图片扫描版，准确度很低；微信提取文字</li></ul><hr><p>合同：</p><ul><li>图片版，则高清扫描仪–&gt;Word</li><li>文字版，则PDF–&gt;(转换)–&gt;Word</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>上机实验</title>
    <link href="/2023/11/17/%E4%B8%8A%E6%9C%BA%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/11/17/%E4%B8%8A%E6%9C%BA%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="盛达有限责任公司-2020-年发生的经济业务"><a href="#盛达有限责任公司-2020-年发生的经济业务" class="headerlink" title="盛达有限责任公司 2020 年发生的经济业务"></a>盛达有限责任公司 2020 年发生的经济业务</h2><p>提交“.ais”文件而不是“.air”文件，它是备份文件。</p><p>使用人：</p><ul><li>manager</li><li>胡X然</li><li>张XX</li></ul><p>共 25 个会计分录。</p><p>蓝色字体处要增设二级明细科目，增值税甚至到三级明细科目。</p><p>录完倒数第二个，就去“凭证审核”；最后一个是“结转损益”，软件会帮我们做。</p><p>“结转损益”也是一张凭证，仍然需要“凭证审核”。</p><p>按月结账，“期末结转”了就会跳到下一个月，页面右下角有时间。</p><p>做完以后看“报表”。</p></br></br><p>2020年10月01日</p><p>“记”字“”号</p><p>“摘要”：自己填</p><p>滑动条可以拉出新的一行</p><p>保存凭证</p><blockquote><p>退不出去，点击“复原”</p></blockquote></br></br><p>“凭证审核”必须要换人</p><p>建新账的时候要用自己的名字</p><p>再编一个审核人</p><p>“过账”一直点“下一步”就行，可以不换人</p><p>“凭证”只有本人才能修改，且“凭证”需要为初始状态，在审核&amp;过账之前</p><p>“反结账”和“反过账”由 manager 来做</p></br></br><p>（1）10 月 1 日，盛达有限责任公司成立，注册资本（实收资本）800 万人民币，其中：成都天府投资公司投入人民币 200 万元，以及建筑物（评估作价 540 万）；科大高新技术公司投入专利权一项（协商作价 60 万）。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">借：库存现金——天府投资 <span class="hljs-number">2000000</span><br>借：固定资产 <span class="hljs-number">5400000</span><br>借：无形资产 <span class="hljs-number">600000</span><br>  贷：实收资本 <span class="hljs-number">8000000</span><br></code></pre></td></tr></table></figure><p>（2）10 月 1 日，公司从银行存款中提取现金 20 万元，应付日常开支。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">借：库存现金 200000<br>  贷：银行存款 200000<br></code></pre></td></tr></table></figure><p>（3）10 月 1 日，公司向银行借入为期 6 个月的流动资金贷款 100 万元，年利率 6%。到<br>期一次还本付息。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">借：银行存款 <span class="hljs-number">1000000</span><br>  贷：短期借款 <span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure><p>（4）10 月 1 日，公司预付未来 12 个月的行政办公设备租金共计 12 万元。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">借：预付账款 120000<br>  贷：库存现金 120000<br></code></pre></td></tr></table></figure><p>（5）10 月 2 日，公司购入机器设备，不含增值税的价款 24 万，增值税额 31200 元，以<br>银行存款支付全部价款。该设备不需要安装。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">借：固定资产 240000<br>借：应交税费-应交增值税-进项税额 31200<br>  贷：银行存款 271200<br></code></pre></td></tr></table></figure><p>（6）10 月 5 日，公司从供应商白云公司处购进 A 商品一批，不含增值税的价款 100 万元，<br>增值税额 130000 元，合同约定货款一个月内付清。</p><p>（7）10 月 10 日，公司向蓝天公司出售上述 A 商品，不含增值税的价款 200 万元，增值<br>税额 260000 元。对方公司用银行存款支付了一半价税款，另外一半签发了一张三个月到<br>期的不带息的商业承兑汇票。</p><p>（8）10 月 11 日，结转库房发出已售 A 商品的成本。</p><p>（9）10 月 12 日向东方公司购买原材料 M 共 1000 件，每件不含增值税的价款 100 元，增<br>值税率 13%，材料已验收入库。我公司开出一张期限 3 个月不带息商业承兑汇票。</p><p>（10）10 月 13 日，车间投入原材料 M400 件用于生产 B 商品和 C 商品，其中用于 B 商品<br>200 件，C 商品 200 件。</p><p>（11）10 月 15 日，公司转账支付本月广告费 10 万元。</p><p>（12）10 月 28 日，结算出本月工资，其中，B 商品工人工资 3 万元，C 商品工人工资 2<br>万元，车间管理人员工资 1 万元（5101 制造费用），公司行政管理人员工资 4 万，公司销售<br>人员工资 5 万元；公司研发人员工资 8 万元（费用化支出）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>会计学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/17/hello-world/"/>
    <url>/2023/11/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>知识图谱</title>
    <link href="/2023/11/16/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    <url>/2023/11/16/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h1><h2 id="一、知识图谱定义"><a href="#一、知识图谱定义" class="headerlink" title="一、知识图谱定义"></a>一、知识图谱定义</h2><p>中文：知识图谱</p><p>英文：Knowledge Graph</p><p>功能：以符号形式描述物理世界中的概念及其相互关系。</p><p>基本组成单位：三元组</p><ul><li>实体-关系-实体</li><li>实体-属性-属性值</li></ul><p>实体间通过关系相互联结，构成网状的知识结构。</p><p>知识图谱可以实现 Web 从网页链接向概念链接的转变，支持用户按主题而不是字符串检索，真正实现<strong>语义检索。</strong>基于知识图谱的搜索引擎，能够以图形方式向用户反馈结构化的知识，用户不必浏览大量网页即能准确定位和深度获取知识。</p></br></br><h2 id="二、语义网技术栈"><a href="#二、语义网技术栈" class="headerlink" title="二、语义网技术栈"></a>二、语义网技术栈</h2><p><img src="https://hexo-0711.oss-cn-chengdu.aliyuncs.com/image/2.png" alt="语义网技术栈"></p></br></br><h3 id="2-1-URI"><a href="#2-1-URI" class="headerlink" title="2.1  URI"></a>2.1  URI</h3><p>URI（Uniform Resource Identifier，统一资源标识符）是一种用于唯一标识和定位资源的字符序列，包括两个具体的子集：</p><ul><li>URL（Uniform Resource Locator，统一资源定位符）</li><li>URN（Uniform Resource Name，统一资源名称）</li></ul></br><h4 id="2-1-1-URL"><a href="#2-1-1-URL" class="headerlink" title="2.1.1  URL"></a>2.1.1  URL</h4><p>URL 不仅能唯一标识资源，还能定位和获取资源。</p><p>通常，URL 包括协议（如 HTTP 或 HTTPS）、主机名、路径和可选的查询参数和片段标识符。</p><p>例如，<a href="https://www.ive.com/index.html">https://www.ive.com/index.html</a> 是一个 URL。</p><table><thead><tr><th>协议</th><th>主机名</th><th>路径</th></tr></thead><tbody><tr><td>https: 或者 http:</td><td><a href="http://www.ive.com/">www.ive.com</a></td><td>index.html</td></tr></tbody></table></br><h4 id="2-1-2-标识符：URN"><a href="#2-1-2-标识符：URN" class="headerlink" title="2.1.2  标识符：URN"></a>2.1.2  标识符：URN</h4><p>URN 只能唯一标识资源，不能定位和获取资源。</p><p>设计 URN 是为了提供一种持久的标识，即使资源在不同的位置或网络状态下也能被唯一识别。</p><p>通常，URN 包括协议标识符（urn）、特定命名空间标识符和特定资源标识符（resource-id）。</p><p>例如，urn:isbn:0451450523 是一个 URN，用于标识一本书的 ISBN 号。</p><table><thead><tr><th>协议标识符</th><th>特定命名空间标识符</th><th>特定资源标识符</th></tr></thead><tbody><tr><td>urn</td><td>isbn</td><td>0451450523</td></tr></tbody></table></br><h4 id="2-1-3-URL-和-URN"><a href="#2-1-3-URL-和-URN" class="headerlink" title="2.1.3  URL 和 URN"></a>2.1.3  URL 和 URN</h4><blockquote><p>Q：既然 URL 都这么强了，为什么还要 URN？</p></blockquote><p>URN 弥补了 URL 在资源标识方面的局限性：</p><ol><li>持久性标识：URN 提供的资源标识是持久的，即使资源的位置或访问方式发生变化也不会影响其标识。这意味着即使资源的 URL 发生变化，使用 URN 标识的资源仍然可以被准确地引用和访问。</li><li>解耦资源与位置：URN 将资源标识和资源的位置进行解耦。URN 仅关注资源的标识和身份，而不依赖于资源的特定位置或获取方式。这对于需要在多个场景中共享和引用资源，而不受资源位置的限制的情况（访问受限、位置变化、失效链接、内容更改）特别有用。</li><li>语义化的标识：URN 可以使用具有语义意义的命名空间和标识符来描述资源，使得资源标识更加易读、易理解和易于管理。URN 的语义化标识有助于提高资源的可发现性和语义互操作性。</li><li>多个 URL 的映射：一个资源可能具有多个 URL，用于不同的访问方式、不同的协议或不同的位置。使用 URN 可以将这些多个 URL 映射到一个统一的标识，使得在引用资源时更加方便和一致。</li></ol></br></br><h3 id="2-2-语法：XML"><a href="#2-2-语法：XML" class="headerlink" title="2.2  语法：XML"></a>2.2  语法：XML</h3><p>菜鸟教程：<a href="https://www.runoob.com/xml/xml-tutorial.html">https://www.runoob.com/xml/xml-tutorial.html</a></p><p>XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）。</p><p><strong>XML 被设计用来传输和存储数据，</strong>不用于表现和展示数据，HTML 则用来表现数据。</p></br><h4 id="2-2-1-XML-实例"><a href="#2-2-1-XML-实例" class="headerlink" title="2.2.1  XML 实例"></a>2.2.1  XML 实例</h4><p><img src="/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.assets/3.png"></p><p>用 XML 来表示上图所示的一本书：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;COOKING&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Giada De Laurentiis<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2005<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>30.00<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;CHILDREN&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>Harry Potter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>J K. Rowling<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2005<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>29.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">category</span>=<span class="hljs-string">&quot;WEB&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>Learning XML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Erik T. Ray<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2003<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>39.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure></br></br><h3 id="2-3-数据交换：RDF"><a href="#2-3-数据交换：RDF" class="headerlink" title="2.3  数据交换：RDF"></a>2.3  数据交换：RDF</h3><p>全称：Resource Description Framework</p><p>中文：资源描述框架</p><p>RDF 使用 Web 标识符来标识事物，并通过属性和属性值来描述资源。</p><p>对资源、属性和属性值的解释：</p><ul><li>资源是可拥有 URI 的任何事物，比如 “<a href="https://www.runoob.com/rdf">https://www.runoob.com//rdf</a>“</li><li>属性是拥有名称的资源，比如 “author” 或 “homepage”</li><li>属性值是某个属性的值，比如 “David” 或 “<a href="https://www.runoob.com/">https://www.runoob.com/</a>“</li></ul><blockquote><p>注意：一个属性值除了可以是字面值，还可以是另外一个资源。</p></blockquote></br><h4 id="2-3-1-RDF-陈述"><a href="#2-3-1-RDF-陈述" class="headerlink" title="2.3.1  RDF 陈述"></a>2.3.1  RDF 陈述</h4><p>资源、属性和属性值的组合可形成一个陈述（被称为陈述的主体、谓语和客体）。</p><p>请看一些陈述的具体例子，来加深理解：</p><p>陈述：”The author of <a href="https://www.runoob.com/rdf">https://www.runoob.com//rdf</a> is David.”</p><ul><li>陈述的主体是：<a href="https://www.runoob.com//rdf">https://www.runoob.com//rdf</a></li><li>谓语是：author</li><li>客体是：David</li></ul><p>陈述：”The homepage of <a href="https://www.runoob.com/rdf">https://www.runoob.com//rdf</a> is <a href="https://www.runoob.com/">https://www.runoob.com/</a>“.</p><ul><li>陈述的主体是：<a href="https://www.runoob.com//rdf">https://www.runoob.com//rdf</a></li><li>谓语是：homepage</li><li>客体是：<a href="https://www.runoob.com/">https://www.runoob.com/</a></li></ul></br><h4 id="2-3-2-RDF-实例"><a href="#2-3-2-RDF-实例" class="headerlink" title="2.3.2  RDF 实例"></a>2.3.2  RDF 实例</h4><p>这是一个 CD 列表的其中几行：</p><table><thead><tr><th><strong>标题</strong></th><th><strong>艺术家</strong></th><th><strong>国家</strong></th><th><strong>公司</strong></th><th><strong>价格</strong></th><th><strong>年份</strong></th></tr></thead><tbody><tr><td>Empire Burlesque</td><td>Bob Dylan</td><td>USA</td><td>Columbia</td><td>10.90</td><td>1985</td></tr><tr><td>Hide your heart</td><td>Bonnie Tyler</td><td>UK</td><td>CBS Records</td><td>9.90</td><td>1988</td></tr></tbody></table><p>这是一个 RDF 文档的其中几行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">rdf:RDF</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:rdf</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:cd</span>=<span class="hljs-string">&quot;http://www.recshop.fake/cd#&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">rdf:Description</span></span><br><span class="hljs-tag"><span class="hljs-attr">rdf:about</span>=<span class="hljs-string">&quot;http://www.recshop.fake/cd/Empire Burlesque&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:artist</span>&gt;</span>Bob Dylan<span class="hljs-tag">&lt;/<span class="hljs-name">cd:artist</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:country</span>&gt;</span>USA<span class="hljs-tag">&lt;/<span class="hljs-name">cd:country</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:company</span>&gt;</span>Columbia<span class="hljs-tag">&lt;/<span class="hljs-name">cd:company</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:price</span>&gt;</span>10.90<span class="hljs-tag">&lt;/<span class="hljs-name">cd:price</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:year</span>&gt;</span>1985<span class="hljs-tag">&lt;/<span class="hljs-name">cd:year</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rdf:Description</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">rdf:Description</span></span><br><span class="hljs-tag"><span class="hljs-attr">rdf:about</span>=<span class="hljs-string">&quot;http://www.recshop.fake/cd/Hide your heart&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:artist</span>&gt;</span>Bonnie Tyler<span class="hljs-tag">&lt;/<span class="hljs-name">cd:artist</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:country</span>&gt;</span>UK<span class="hljs-tag">&lt;/<span class="hljs-name">cd:country</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:company</span>&gt;</span>CBS Records<span class="hljs-tag">&lt;/<span class="hljs-name">cd:company</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:price</span>&gt;</span>9.90<span class="hljs-tag">&lt;/<span class="hljs-name">cd:price</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">cd:year</span>&gt;</span>1988<span class="hljs-tag">&lt;/<span class="hljs-name">cd:year</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rdf:Description</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">rdf:RDF</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>此 RDF 文档的第一行是 XML 声明。这个 XML 声明之后是 RDF 文档的根元素：*<a href="rdf:RDF">rdf:RDF</a>*。</p><p><em>xmlns:rdf</em> 命名空间，规定了带有前缀 rdf 的元素来自命名空间 “<a href="http://www.w3.org/1999/02/22-rdf-syntax-ns#%22%E3%80%82">http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;。</a></p><p><em>xmlns:cd</em> 命名空间，规定了带有前缀 cd 的元素来自命名空间 “<a href="http://www.recshop.fake/cd#%22%E3%80%82">http://www.recshop.fake/cd#&quot;。</a></p><p><em><a href="rdf:Description">rdf:Description</a></em> 元素包含了对被 <em>rdf:about</em> 属性标识的资源的描述。</p><p>元素：*<a href="cd:artist">cd:artist</a><em>、</em><a href="cd:country">cd:country</a>*、</p><p><a href="cd:company">cd:company</a> 等是此资源的属性。</p><ul><li>陈述的主体是：<a href="http://www.recshop.fake/cd/Empire">http://www.recshop.fake/cd/Empire</a> Burlesque</li><li>谓语是：cd:artist、cd:country、cd:company、cd:price、cd:year</li><li>客体是：Bob Dylan、USA、Columbia、10.90、1985</li></ul></br></br><h3 id="2-4-分类法：RDF-S"><a href="#2-4-分类法：RDF-S" class="headerlink" title="2.4  分类法：RDF-S"></a>2.4  分类法：RDF-S</h3><p>RDF 的表达能力有限，无法区分类和对象，也无法定义和描述类的关系。RDF 是对具体事物的描述，缺乏抽象能力，无法对同一类别的事物进行定义和描述，需要 Schema 的引入。RDFS，即“Resource Description Framework Schema”模式语言作为 RDF 的补充解决了 RDF 表达能力有限的困境。</p></br><h4 id="2-4-1-RDF-S-常用词汇"><a href="#2-4-1-RDF-S-常用词汇" class="headerlink" title="2.4.1  RDF-S 常用词汇"></a>2.4.1  RDF-S 常用词汇</h4><p>RDFS 中常用的词汇：</p><ul><li>rdfs:Class：用于定义类。</li><li>rdfs:domain：用于表示该属性属于哪个类别。</li><li>rdfs:range：用于描述该属性的取值类型。</li><li>rdfs:subClassOf：用于描述该类的父类。</li></ul><p>比如，我们可以定义一个运动员类，声明该类是人的子类。</p><ul><li>rdfs:subProperty：用于描述该属性的父属性。</li></ul><p>比如，我们可以定义一个名称属性，声明中文名称和全名是名称的子类。</p></br><h4 id="2-4-2-RDF-S-实例"><a href="#2-4-2-RDF-S-实例" class="headerlink" title="2.4.2  RDF-S 实例"></a>2.4.2  RDF-S 实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">rdf:RDF</span> <span class="hljs-attr">xmlns:rdf</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:rdfs</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/01/rdf-schema#&quot;</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 声明一个类（Class） --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:Class</span> <span class="hljs-attr">rdf:about</span>=<span class="hljs-string">&quot;#Person&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:label</span>&gt;</span>Person<span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:comment</span>&gt;</span>A class representing a person.<span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:comment</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:Class</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 声明一个属性（Property） --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rdf:Property</span> <span class="hljs-attr">rdf:about</span>=<span class="hljs-string">&quot;#hasName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:label</span>&gt;</span>hasName<span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:comment</span>&gt;</span>Relates a person to their name.<span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:comment</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:domain</span> <span class="hljs-attr">rdf:resource</span>=<span class="hljs-string">&quot;#Person&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:range</span> <span class="hljs-attr">rdf:resource</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema#string&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">rdf:Property</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 创建一个实例（Instance） --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rdf:Description</span> <span class="hljs-attr">rdf:about</span>=<span class="hljs-string">&quot;#John&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdf:type</span> <span class="hljs-attr">rdf:resource</span>=<span class="hljs-string">&quot;#Person&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hasName</span>&gt;</span>John Doe<span class="hljs-tag">&lt;/<span class="hljs-name">hasName</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">rdf:Description</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 定义子类关系（Subclass） --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:Class</span> <span class="hljs-attr">rdf:about</span>=<span class="hljs-string">&quot;#Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:label</span>&gt;</span>Student<span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:comment</span>&gt;</span>A subclass representing a student.<span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:comment</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:subClassOf</span> <span class="hljs-attr">rdf:resource</span>=<span class="hljs-string">&quot;#Person&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:Class</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 定义属性子属性（Subproperty） --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rdf:Property</span> <span class="hljs-attr">rdf:about</span>=<span class="hljs-string">&quot;#hasEmail&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:subPropertyOf</span> <span class="hljs-attr">rdf:resource</span>=<span class="hljs-string">&quot;#hasName&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rdfs:comment</span>&gt;</span>Relates a person to their email address.<span class="hljs-tag">&lt;/<span class="hljs-name">rdfs:comment</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">rdf:Property</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">rdf:RDF</span>&gt;</span><br></code></pre></td></tr></table></figure></br></br><h3 id="2-5-本体：OWL"><a href="#2-5-本体：OWL" class="headerlink" title="2.5  本体：OWL"></a>2.5  本体：OWL</h3><p>OWL的本体在RDFS具有的类、属性、实例的基础上，加入了关系、限制和公理。</p><p>通过 RDF(S) 可以表达一些简单的语义，但在更复杂的场景下，RDF(S)语义表达能力显得太弱，还缺少诸多常用的特征。包括对局部值域的属性定义，类、属性、个体的等价性，不相交类的定义，基数约束，关于属性特征的描述等。因此W3C提出了OWL语言扩展RDF(S)，作为语义网上表示本体的推荐语言。OWL可以看作是RDFS的一个扩展，添加了额外的预定义词汇。</p><p>OWL相较于RDFS，引入了布尔算子（并、或、补）、递归地构建复杂的类，还提供了表示存在值约束、任意值约束和数量值约束等能力。同时，OWL能提供描述属性具有传递性、对称性、函数性等性质。还有两个类等价或者不相交，两个属性等价或者互逆，两个实例相同或者不同，还有枚举类等等。</p><p>OWL 描述属性常用的词汇：</p><p>描述属性特征的词汇</p><ul><li>owl:TransitiveProperty.表示该属性具有传递性质。例如，我们定义“位于”是具有传递性的属性，若A位于B，B位于C，那么A肯定位于C。</li><li>owl:SymmetricProperty.     表示该属性具有对称性。例如，我们定义“认识”是具有对称性的属性，若A认识B，那么B肯定认识A。</li><li>owl:FunctionalProperty.     表示该属性取值的唯一性。 例如，我们定义“母亲”是具有唯一性的属性，若A的母亲是B，在其他地方我们得知A的母亲是C，那么B和C指的是同一个人。</li><li>owl:inverseOf.     定义某个属性的相反关系。例如，定义“父母”的相反关系是“子女”，若A是B的父母，那么B肯定是A的子女。</li></ul><p>本体映射词汇（Ontology Mapping）</p><ul><li>owl:equivalentClass.     表示某个类和另一个类是相同的。</li><li>owl:equivalentProperty.     表示某个属性和另一个属性是相同的。</li><li>owl:sameAs. 表示两个实体是同一个实体。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>知识图谱</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
